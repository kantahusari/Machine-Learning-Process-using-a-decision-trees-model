# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18N1bobid02DI7JbfzSq2YUmjXqqnbAuR
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt
# %matplotlib inline

#reading the data 
dataTennis = pd.read_csv('Tennis.csv')

# shape of the data 
dataTennis.shape

#first five row 
dataTennis.head()

# check if missing values
dataTennis.isnull().sum()

#sepearating in depenpent and dependent variable
y = dataTennis['Court Width(ft)']
x= dataTennis.drop(['Court Height(ft)'], axis =1)

#import train_test_spilt to create validation set 
from sklearn.model_selection import train_test_split

#creating the train and validation set 
X_train, X_valid, y_train, y_valid = train_test_split(x,y, random_state = 101, stratify = y, test_size = 4)

y_train.value_counts(normalize = True)

y_valid.value_counts(normalize = True)

X_train.shape, y_train.shape

X_valid.shape, y_valid.shape

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeClassifier(random_state = 10)

dt_model.fit(X_train, y_train)

dt_model.score(X_train, y_train)

dt_model.score(X_valid, y_valid)

dt_model.predict(X_valid)

dt_model.predict_proba(X_valid)

y_pred = dt_model.predict_proba(X_valid)[:,1]

# getting the acruracy 
new_y = []
for i in range(len(y_pred)):
    if y_pred[i]<0.5:
        new_y.append(0)
    
    else:
            new_y.append(1)

from sklearn.metrics import accuracy_score

accuracy_score(y_valid, new_y)

train_accuracy = []
valid_accuracy = []
for depth in range(1, 10):
    dt_model = DecisionTreeClassifier(max_depth = depth, random_state = 10)
    dt_model.fit(X_train, y_train)
    train_accuracy.append(dt_model.score(X_train,y_train))
    valid_accuracy.append(dt_model.score(X_valid, y_valid))

frame = pd.DataFrame({'max depth':range(1,10),'train_acc':train_accuracy, 'valid_acc':valid_accuracy})
frame.head()

