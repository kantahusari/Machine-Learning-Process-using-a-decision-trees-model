# -*- coding: utf-8 -*-
""".ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16viSfaI2O8wJ7ZsMcMPnl5kLV102x1D8

This program will predict if player will play tennis that day based on th weather
(outlook, humdity, tempature, windy) usong a deicison trss
"""

from sklearn import tree #For our Decision Tree
import pandas as pd # For our DataFrame
import pydotplus # To create our Decision Tree Graph
from IPython.display import Image

tennis_df = pd.DataFrame()

#add outlook
tennis_df['Outlook'] = ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 
                     'overcast', 'sunny', 'sunny', 'rainy', 'sunny', 'overcast',
                     'overcast', 'rainy']

#add temperature
tennis_df['Temperature'] = ['hot', 'hot', 'hot', 'mild', 'cool', 'cool', 'cool',
                         'mild', 'cool', 'mild', 'mild', 'mild', 'hot', 'mild']

#add humidity
tennis_df['Humidity'] = ['high', 'high', 'high', 'high', 'normal', 'normal', 'normal',
                      'high', 'normal', 'normal', 'normal', 'high', 'normal', 'high']

#add windy
tennis_df['Windy'] = ['false', 'true', 'false', 'false', 'false', 'true', 'true',
                   'false', 'false', 'false', 'true', 'true', 'false', 'true']

#finally add play
tennis_df['Play'] = ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 
                  'yes', 'yes', 'no']


#Print/show the new data
print(tennis_df)

#convert the categorrical data into dummy/indicatore variable or (binary variable)
one_data=  pd.get_dummies(tennis_df[ ['Outlook', 'Temperature', 'Humidity', 'Windy'] ])
#print the new dummy data
one_data

# The decision tree classifier.
clf = tree.DecisionTreeClassifier()
# Training the Decision Tree
clf_train = clf.fit(one_data, tennis_df['Play'])

# Export/Print a decision tree in DOT format.
print(tree.export_graphviz(clf_train, None))

#Create Dot Data
dot_data = tree.export_graphviz(clf_train, out_file=None, feature_names=list(one_data.columns.values), 
                                class_names=['Not_Play', 'Play'], rounded=True, filled=True) #Gini decides which attribute/feature should be placed at the root node, which features will act as internal nodes or leaf nodes
#Create Graph from DOT data
graph = pydotplus.graph_from_dot_data(dot_data)

# Show graph
Image(graph.create_png())

# Test model prediction input:
# Outlook = sunny,Temperature =  hot, Humidity = normal, Windy = false
prediction = clf_train.predict([[0,0,1,0,1,0,0,1,1,0]])
prediction

dataCovid = pd.read_csv('Covid_19.csv')

dataCovid.head()

covid_Bindata=  pd.get_dummies(dataCovid[ ['Cough', 'Headache', 'Fever', 'Runny nose','Loss Of Taste','Diagnosis'] ])
covid_Bindata

# The decision tree classifier.
covidClf = tree.DecisionTreeClassifier()
# Training the Decision Tree
covid_clf_train = clf.fit(covid_Bindata, dataCovid[['Cough', 'Headache', 'Fever', 'Runny nose','Loss Of Taste','Diagnosis'] ])

# Export/Print a decision tree in DOT format.
print(tree.export_graphviz(covid_clf_train, None))

#Create Dot Data
dotCovid_data = tree.export_graphviz(covid_clf_train, out_file=None, feature_names=list(covid_Bindata.columns.values), 
                                class_names=['NoDiagnosis', 'Diagnosis'], rounded=True, filled=True) #Gini decides which attribute/feature should be placed at the root node, which features will act as internal nodes or leaf nodes
#Create Graph from DOT data
graphCovid = pydotplus.graph_from_dot_data(dotCovid_data)

# Show graph
Image(graphCovid.create_png())

prediction2 = covid_clf_train.predict([[0,0,1,1,0,0,1,0,0,0,1,0,1,0]])
prediction2



